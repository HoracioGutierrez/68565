https://ant.design/components
https://ant.design/components/flex#api
https://tailwindui.com/components/application-ui/navigation/navbars
https://mambaui.com/
https://lucide.dev/icons/
https://www.realtimecolors.com/
https://dummyjson.com/docs

Componentes : 

- Son funciones 
- Arrancan en mayuscula
- tienen retorno si o si
- se pueden retornar muchos tipos de datos pero casi siempre es JSX
- no se puede retornar DOS o mas elementos JSX en simultaneo
- me permiten tener UI

Destructuring



Pre Entrega 1 : 

- Crear una carpeta "components" en la carpeta "src"

- Crear un archivo NavBar.jsx en la carpeta "components" que contenga el componente de NavBar : Tiene que mostrar un menu de links
- Crear un archivo CartWidget.jsx en la carpeta "components" que contenga el componente de CartWidget : Tiene que mostrar un icono de carrito o imagen de carrito
- Crear un archivo ItemListContainer.jsx en la carpeta "components" que contenga el componente de ItemListContainer : Tiene que mostrar un mensaje de bienvenida en pantalla usando props


- CartWidget va dentro de NavBar, osea que se importa en el archivo NavBar.jsx
- Navbar va dentro de App.jsx, osea que se importa en el archivo App.jsx
- ItemListContainer va dentro de App.jsx, osea que se importa en el archivo App.jsx




Hooks de React : 

Son todos funciones que arrancan con la palabra "use", solo se pueden ejecutar dentro de un componente tantas veces como quieras pero nunca dentro de un condicional/bucle

- useState
- useEffect
- useContext
- useRef
- useReducer
- useCallback
- useMemo
- useLayoutEffect
- useTransition



    
Notas del hook useState : 
    
const elResultadoDelHookEstado = useState(true) //[true,()=>{}]
const miEstado = elResultadoDelHookEstado[0] //true
const unaFuncion = elResultadoDelHookEstado[1] //()=>{}

console.log(elResultadoDelHookEstado)

Esto me permite tener una variable que si su valor cambia, cambia tambien el UI
Formula (sintaxis)
const [elEstado,setElEstado] = useState(valorInicial)

const toggleSidebar = true;

Quiero crear una constante llamada "contador" que valga lo que haya en el array que me devuelve el useState, en esa misma posicion del array, osea 0.
Quiero crear una constante llamada "setContador" que valga lo que haya en la posicion 1 del array que me devuelve el useState.
contador = 1
contador++
contador = contador + 1
contador += 1



Si el estado cambia, el componente se recarga (el componente detecta el cambio de estado entonces se vuelve a reeecutar)
Para cambiar el valor a un estado, si o si tengo que usar su funcion set

Lugares/ideas en donde podria usar estados (useState) : 

- para guardar los datos obtenidos en una api (el valor inicial sera el mismo tipo de dato 
que vas a obtener de la api)

- cambiar modo claro a oscuro (init : Boolean)
- un contador (init : Number)
- abrir y cerrar una barra de navegacion (init : Boolean)
- un popup que abra y cierra (init : Boolean)
- mostrar el nombre del usuario logueado (init : String)




Operador Ternario : Es como un if/else ( condicion ? true : false)
Operador AND : &&
Operador OR : ||

true
false | 0 | undefined | null | "" | NaN 

if(condicion){
    console.log("Bien")
} else {
    console.log("Mal")
}

const resultado = condicion ? X : Y

if(condicion){
    return X
} else {
    return Y
}



Tipos de componentes / Patrones : 

- Componentes Layout : Este componente solo agrupa grandes partes de la aplicacion

- Componentes Container * : Este componente sirve para guardar/abstraer logica (estados, pedidos a apis, etc). El nombre de estos componentes lleva la palabra "Container" en el final : ItemListContainer , UsersContainer, ProductsFromCartContainer, etc...

- Componentes Presentacionales * : Este componente solo sirve para ver algo en pantalla. Usualmente va a recibir props de un componente Container. EL nombre de estos componentes lleva el mismo nombre del container pero sin la palabra "Container" : ItemList,Item,Users,ProductsFromCart, etc...

* se necesita uno de cada uno para poder desarrollar el patron container


document.addEventListener("click",()=>{})

    fetch()
        .then((res)=>{ return 1 }) : Si el fetch salio bien

        Este res seria el valor 1
        .then((res)=>{ return "Hola" }) 

        Este res seria el valor "Hola"
        .then((res)=>{ return true }) 

        Este res seria el valor true
        .then((res)=>{}) 

        .then((res)=>{}) : Si el fetch salio bien
        .catch(()=>{}) : Si el fetch salio mal
        .finally(()=>{}) : Siempre que el fetch termine, se ejecuta

    fetch('https://dummyjson.com/products')
        .then(res => res.json())
        .then(console.log);
    
    */

    //Esta linea es la que hace el pedido
    fetch('https://dummyjson.com/products')// {}
        .then((respuestaBinaria) => {
            //Esta linea convierte la respuesta binaria en un objeto
            return respuestaBinaria.json()
        })
        .then((respuestaConFormato) => {
            console.log(respuestaConFormato)
        })
        .catch((err) => {
            console.log("Hubo un error")
            console.log(err)
        })