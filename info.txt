https://ant.design/components
https://ant.design/components/flex#api
https://tailwindui.com/components/application-ui/navigation/navbars
https://mambaui.com/
https://lucide.dev/icons/
https://www.realtimecolors.com/
https://dummyjson.com/docs

Componentes : 

- Son funciones 
- Arrancan en mayuscula
- tienen retorno si o si
- se pueden retornar muchos tipos de datos pero casi siempre es JSX
- no se puede retornar DOS o mas elementos JSX en simultaneo
- me permiten tener UI

Destructuring



Pre Entrega 1 : 

- Crear una carpeta "components" en la carpeta "src"

- Crear un archivo NavBar.jsx en la carpeta "components" que contenga el componente de NavBar : Tiene que mostrar un menu de links
- Crear un archivo CartWidget.jsx en la carpeta "components" que contenga el componente de CartWidget : Tiene que mostrar un icono de carrito o imagen de carrito
- Crear un archivo ItemListContainer.jsx en la carpeta "components" que contenga el componente de ItemListContainer : Tiene que mostrar un mensaje de bienvenida en pantalla usando props


- CartWidget va dentro de NavBar, osea que se importa en el archivo NavBar.jsx
- Navbar va dentro de App.jsx, osea que se importa en el archivo App.jsx
- ItemListContainer va dentro de App.jsx, osea que se importa en el archivo App.jsx




Hooks de React : 

Son todos funciones que arrancan con la palabra "use", solo se pueden ejecutar dentro de un componente tantas veces como quieras pero nunca dentro de un condicional/bucle

- useState
- useEffect
- useContext
- useRef
- useReducer
- useCallback
- useMemo
- useLayoutEffect
- useTransition



    
Notas del hook useState : 


Sintaxis : const [variableEstado,setVariableEstado] = useState(valorInicial);
    
const elResultadoDelHookEstado = useState(true) //[true,()=>{}]
const miEstado = elResultadoDelHookEstado[0] //true
const unaFuncion = elResultadoDelHookEstado[1] //()=>{}

- Esto me permite tener una variable que si su valor cambia, cambia tambien el UI
- Quiero crear una constante llamada "contador" que valga lo que haya en el array que me devuelve el useState, en esa misma posicion del array, osea 0.
- Quiero crear una constante llamada "setContador" que valga lo que haya en la posicion 1 del array que me devuelve el useState.
const [contador,setContador] = useState(0)
- Si el estado cambia, el componente se recarga (el componente detecta el cambio de estado entonces se vuelve a reejecutar)
- Para cambiar el valor a un estado, si o si tengo que usar su funcion set

Lugares/ideas en donde podria usar estados (useState) : 

- para guardar los datos obtenidos en una api (el valor inicial sera el mismo tipo de dato 
que vas a obtener de la api)
- cambiar modo claro a oscuro (init : Boolean)
- un contador (init : Number)
- abrir y cerrar una barra de navegacion (init : Boolean)
- un popup que abra y cierra (init : Boolean)
- mostrar el nombre del usuario logueado (init : String)


Operador Ternario : Es como un if/else ( condicion ? true : false)
Operador AND : &&
Operador OR : ||

true
false | 0 | undefined | null | "" | NaN 

if(condicion){
    console.log("Bien")
} else {
    console.log("Mal")
}

const resultado = condicion ? X : Y

if(condicion){
    return X
} else {
    return Y
}

Tipos de componentes / Patrones : 

- Componentes Layout : Este componente solo agrupa grandes partes de la aplicacion

- Componentes Container * : Este componente sirve para guardar/abstraer logica (estados, pedidos a apis, etc). El nombre de estos componentes lleva la palabra "Container" en el final : ItemListContainer , UsersContainer, ProductsFromCartContainer, etc...

- Componentes Presentacionales * : Este componente solo sirve para ver algo en pantalla. Usualmente va a recibir props de un componente Container. EL nombre de estos componentes lleva el mismo nombre del container pero sin la palabra "Container" : ItemList,Item,Users,ProductsFromCart, etc...

* se necesita uno de cada uno para poder desarrollar el patron container


//Esta linea es la que hace el pedido
fetch('https://dummyjson.com/products')// {}
    .then((respuestaBinaria) => {
        //Esta linea convierte la respuesta binaria en un objeto
        return respuestaBinaria.json()
        return respuestaBinaria.text()
        return respuestaBinaria.blob()
    })
    .then((respuestaConFormato) => {
        console.log(respuestaConFormato)
    })
    .catch((err) => {
        console.log("Hubo un error")
        console.log(err)
    })

Storage API
Fetch API : Esta se encarga de hacer requests
Promise API : Esta se encarga de "envolver" partes del codigo de forma tal que cuando esas partes terminen de ejecutarse, la promesa te "avisa" cuando termino todo

const resultado = fetch("/productos")
const resultado = caches.open("demo")

ASYNC / AWAIT
GENERATOR FUNCTIONS


Ciclo de vida : 

UN componente se va a volver a ejecutar a si mismo si : 

- Uno de sus estados cambia
- Recibir nuevos valores de props
- Si el componente padre cambia


useEffect : 

Es un hook que sirve para envolver bloques de codigo que no queremos que pasen muchas veces, sino una sola vez o de manera "controlada", es decir, si su array de dependencias cambia de valores.

Sintaxis 

useEffect(function(){},[])
useEffect(()=>{},[])
useEffect(()=>{},[x,y,z])

Lugares/ideas en donde podria usar efectos (useEffect) : 

- Pedidos a una api, guardaria todo el fetch adentro del efecto
- Timers (setInterva / setTimeout) , para que no se inicien multiples contadores en simultateno
- Eventos pero solo si se hace addEventListener


const nombres = ["Ana","juan","Carlos"];
const usuarios = [{nombre:"Ana",sueldo:1000},{nombre:"Carlos",sueldo:500}]

for(){}
const res = array.forEach((elemento,indice)=>{}) => undefined


const res = array.map((elemento,indice)=>{}) => [] igual longitud
const res = array.filter((elemento,indice)=>{}) => [] igual o menor longitud
const res = array.some((elemento,indice)=>{}) => true | false
const res = array.find((elemento,indice)=>{}) => elemento


array.sort(()=>{})
array.reduce(()=>{})
etc...